<?php

declare(strict_types=1);

namespace TTBooking\TicketAllocator\Facades;

use Illuminate\Support\Facades\Facade;
use TTBooking\TicketAllocator\Support\FactorDictionary;

/**
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary range(int $from, int $to)
 * @method static array all()
 * @method static \Illuminate\Support\LazyCollection lazy()
 * @method static float|int|null avg(callable|int)|string|null $callback = null)
 * @method static float|int|null median(string|array|null $key = null)
 * @method static array|null mode(string|array|null $key = null)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary collapse()
 * @method static bool contains(callable||string $key, mixed $operator = null, mixed $value = null)
 * @method static bool containsStrict(callable| $key, |null $value = null)
 * @method static bool doesntContain(mixed $key, mixed $operator = null, mixed $value = null)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary crossJoin(\Illuminate\Contracts\Support\Arrayable|iterable ...$lists)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary diff(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary diffUsing(\Illuminate\Contracts\Support\Arrayable|iterable $items, callable $callback)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary diffAssoc(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary diffAssocUsing(\Illuminate\Contracts\Support\Arrayable|iterable $items, callable $callback)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary diffKeys(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary diffKeysUsing(\Illuminate\Contracts\Support\Arrayable|iterable $items, callable $callback)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary duplicates(callable|string|null $callback = null, bool $strict = false)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary duplicatesStrict(callable|string|null $callback = null)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary except(\Illuminate\Support\Enumerable|array|string $keys)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary filter(callable|null $callback = null)
 * @method static  first(callable|null $callback = null, |\Closure $default = null)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary flatten(int $depth = unknown)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary flip()
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary forget(|array $keys)
 * @method static string get(string $key, mixed|\Closure $default = null)
 * @method static  getOrPut(mixed $key, |\Closure $value)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary groupBy(callable|array|string $groupBy, bool $preserveKeys = false)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary keyBy(callable|array|string $keyBy)
 * @method static bool has(|array $key)
 * @method static bool hasAny(mixed $key)
 * @method static string implode(callable|string $value, string|null $glue = null)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary intersect(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary intersectUsing(\Illuminate\Contracts\Support\Arrayable|iterable $items, callable $callback)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary intersectAssoc(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary intersectAssocUsing(\Illuminate\Contracts\Support\Arrayable|iterable $items, callable $callback)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary intersectByKeys(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static bool isEmpty()
 * @method static bool containsOneItem()
 * @method static string join(string $glue, string $finalGlue = '')
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary keys()
 * @method static  last(callable|null $callback = null, |\Closure $default = null)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary pluck(string|int|array $value, string|null $key = null)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary map(callable $callback)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary mapToDictionary(callable $callback)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary mapWithKeys(callable $callback)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary merge(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary mergeRecursive(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary combine(\Illuminate\Contracts\Support\Arrayable|iterable $values)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary union(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary nth(int $step, int $offset = 0)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary only(\Illuminate\Support\Enumerable|array|string|null $keys)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary||null pop(int $count = 1)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary prepend(void $value, void $key = null)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary push(void ...$values)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary concat(iterable $source)
 * @method static  pull(void $key, |\Closure $default = null)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary put(string $key, string $value)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary| random(callable|int|null $number = null, bool $preserveKeys = false)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary replace(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary replaceRecursive(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary reverse()
 * @method static |bool search(|callable $value, bool $strict = false)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary||null shift(int $count = 1)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary shuffle(int|null $seed = null)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary sliding(int $size = 2, int $step = 1)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary skip(int $count)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary skipUntil(|callable $value)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary skipWhile(|callable $value)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary slice(int $offset, int|null $length = null)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary split(int $numberOfGroups)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary splitIn(int $numberOfGroups)
 * @method static void sole(callable|string $key = null, mixed $operator = null, mixed $value = null)
 * @method static void firstOrFail(callable|string $key = null, mixed $operator = null, mixed $value = null)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary chunk(int $size)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary chunkWhile(callable $callback)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary sort(callable|null|int $callback = null)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary sortDesc(int $options = 0)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary sortBy(array|callable|string $callback, int $options = 0, bool $descending = false)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary sortByDesc(array|callable|string $callback, int $options = 0)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary sortKeys(int $options = 0, bool $descending = false)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary sortKeysDesc(int $options = 0)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary sortKeysUsing(callable $callback)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary splice(int $offset, int|null $length = null, array $replacement = [])
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary take(int $limit)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary takeUntil(|callable $value)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary takeWhile(|callable $value)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary transform(callable $callback)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary dot()
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary undot()
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary unique(callable|string|null $key = null, bool $strict = false)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary values()
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary zip(\Illuminate\Contracts\Support\Arrayable|iterable $items)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary pad(int $size, void $value)
 * @method static \ArrayIterator getIterator()
 * @method static int count()
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary countBy(callable|string|null $countBy = null)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary add(void $item)
 * @method static \Illuminate\Support\Collection toBase()
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary make(\Illuminate\Contracts\Support\Arrayable|iterable|null $items = [])
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary wrap(iterable| $value)
 * @method static array unwrap(array|\TTBooking\TicketAllocator\Support\FactorDictionary $value)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary empty()
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary times(int $number, callable|null $callback = null)
 * @method static float|int|null average(callable|int)|string|null $callback = null)
 * @method static bool some(callable||string $key, mixed $operator = null, mixed $value = null)
 * @method static never dd(mixed ...$args)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary dump()
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary each(callable $callback)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary eachSpread(callable $callback)
 * @method static bool every(callable||string $key, mixed $operator = null, mixed $value = null)
 * @method static |null firstWhere(callable|string $key, mixed $operator = null, mixed $value = null)
 * @method static  value(string $key, |\Closure $default = null)
 * @method static bool isNotEmpty()
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary mapSpread(callable $callback)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary mapToGroups(callable $callback)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary flatMap(callable $callback)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary mapInto(string $class)
 * @method static mixed min(callable|string|null $callback = null)
 * @method static mixed max(callable|string|null $callback = null)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary forPage(int $page, int $perPage)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary partition(callable||string $key, |string|null $operator = null, |null $value = null)
 * @method static mixed sum(callable|string|null $callback = null)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary| whenEmpty(callable $callback, callable|null $default = null)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary| whenNotEmpty(callable $callback, callable|null $default = null)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary| unlessEmpty(callable $callback, callable|null $default = null)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary| unlessNotEmpty(callable $callback, callable|null $default = null)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary where(callable|string $key, mixed $operator = null, mixed $value = null)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary whereNull(string|null $key = null)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary whereNotNull(string|null $key = null)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary whereStrict(string $key, mixed $value)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary whereIn(string $key, \Illuminate\Contracts\Support\Arrayable|iterable $values, bool $strict = false)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary whereInStrict(string $key, \Illuminate\Contracts\Support\Arrayable|iterable $values)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary whereBetween(string $key, \Illuminate\Contracts\Support\Arrayable|iterable $values)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary whereNotBetween(string $key, \Illuminate\Contracts\Support\Arrayable|iterable $values)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary whereNotIn(string $key, \Illuminate\Contracts\Support\Arrayable|iterable $values, bool $strict = false)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary whereNotInStrict(string $key, \Illuminate\Contracts\Support\Arrayable|iterable $values)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary whereInstanceOf(string|array $type)
 * @method static void pipe(callable $callback)
 * @method static void pipeInto(string $class)
 * @method static mixed pipeThrough(array $callbacks)
 * @method static void reduce(callable $callback, void $initial = null)
 * @method static array reduceSpread(callable $callback, mixed ...$initial)
 * @method static void reduceWithKeys(callable $callback, void $initial = null)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary reject(callable|bool| $callback = true)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary tap(callable $callback)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary uniqueStrict(callable|string|null $key = null)
 * @method static \Illuminate\Support\Collection collect()
 * @method static array toArray()
 * @method static array jsonSerialize()
 * @method static string toJson(int $options = 0)
 * @method static \CachingIterator getCachingIterator(int $flags = 1)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary escapeWhenCastingToString(bool $escape = true)
 * @method static void proxy(string $method)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary|mixed when(\Closure|mixed|null $value = null, callable|null $callback = null, callable|null $default = null)
 * @method static \TTBooking\TicketAllocator\Support\FactorDictionary|mixed unless(\Closure|mixed|null $value = null, callable|null $callback = null, callable|null $default = null)
 * @method static void macro(string $name, object|callable $macro)
 * @method static void mixin(object $mixin, bool $replace = true)
 * @method static bool hasMacro(string $name)
 * @method static void flushMacros()
 *
 * @see \TTBooking\TicketAllocator\Support\FactorDictionary
 */
class Factor extends Facade
{
    /**
     * Get the registered name of the component.
     *
     * @return class-string
     */
    protected static function getFacadeAccessor(): string
    {
        return FactorDictionary::class;
    }
}
